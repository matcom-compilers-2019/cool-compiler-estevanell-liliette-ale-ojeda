
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW ASSIGN AT BOOLEAN CASE CLASS COLON COMMA DIVIDE DOT ELSE EQ ESAC FALSE FI ID IF IN INHERITS INTEGER INT_COMP ISVOID LBRACE LET LOOP LPAREN LT LTEQ MINUS MULTIPLY NEW NOT OF PLUS POOL RBRACE RPAREN SELF SEMICOLON STRING THEN TRUE TYPE WHILE\n        program : classes\n        \n        classes : classes class SEMICOLON\n                | class SEMICOLON\n        \n        class : CLASS TYPE LBRACE features_list_init RBRACE\n        \n        class : CLASS TYPE INHERITS TYPE LBRACE features_list_init RBRACE\n        \n        features_list_init : features_list\n                            | empty\n        \n        features_list : features_list feature SEMICOLON\n                      | feature SEMICOLON\n        \n        feature : ID LPAREN params_list RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID COLON TYPE ASSIGN expression\n        \n        feature : ID COLON TYPE\n        \n        params_list : params_list COMMA params\n                    | params\n        \n        params : ID COLON TYPE\n        \n        expression : ID\n        \n        expression : INTEGER\n        \n        expression : TRUE\n        expression : FALSE\n\n        \n        expression : STRING\n        \n        expression  : SELF\n        \n        expression : LBRACE block RBRACE\n        \n        block : block expression SEMICOLON\n              | expression SEMICOLON\n         \n        expression : ID ASSIGN expression\n        \n        expression : expression DOT ID LPAREN arguments_list_init RPAREN\n        \n        arguments_list_init : arguments_list\n                           | empty\n        \n        arguments_list : arguments_list COMMA expression\n                       | expression\n        \n        expression : expression AT TYPE DOT ID LPAREN arguments_list_init RPAREN\n        \n        expression : ID LPAREN arguments_list_init RPAREN\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULTIPLY expression\n                   | expression DIVIDE expression\n        \n        expression : expression LT expression\n                   | expression LTEQ expression\n                   | expression EQ expression\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : IF expression THEN expression ELSE expression FI\n         \n        expression : WHILE expression LOOP expression POOL\n        \n        expression : let_expression\n        \n        let_expression_heads : let_expression_head_i COMMA let_expression_heads\n                            | let_expression_head COMMA let_expression_heads\n        \n        let_expression_heads : let_expression_head_i\n                             | let_expression_head\n        \n        let_expression_head_i : ID COLON TYPE ASSIGN expression\n        \n        let_expression_head : ID COLON TYPE\n        \n        let_expression : LET ID COLON TYPE COMMA let_expression_heads IN expression\n                       | LET ID COLON TYPE IN expression\n         \n        let_expression : LET ID COLON TYPE ASSIGN expression COMMA let_expression_heads IN expression\n                       | LET ID COLON TYPE ASSIGN expression IN expression\n        \n        expression : CASE expression OF actions ESAC\n        \n        actions : actions action\n                | action\n        \n        action : ID COLON TYPE ARROW expression SEMICOLON\n        \n        expression : NEW TYPE\n        \n        expression : ISVOID expression\n        \n        expression : INT_COMP expression\n        \n        expression : NOT expression\n        \n        empty :\n        '
    
_lr_action_items = {'CLASS':([0,2,6,8,],[4,4,-3,-2,]),'$end':([1,2,6,8,],[0,-1,-3,-2,]),'SEMICOLON':([3,5,14,17,18,28,35,40,41,42,43,44,45,46,51,72,77,78,79,80,84,91,92,93,94,95,96,97,98,99,101,107,108,119,124,125,131,139,142,150,151,153,157,162,],[6,8,19,-4,23,-13,-5,-17,-12,-18,-19,-20,-21,-22,-44,100,-59,-60,-61,-62,-26,-34,-35,-36,-37,-38,-39,-40,-23,112,-41,-11,-33,-10,-43,-55,-27,-52,-42,-32,158,-51,-54,-53,]),'TYPE':([4,10,21,30,33,37,53,63,105,127,144,],[7,16,28,36,39,58,77,90,118,134,152,]),'LBRACE':([7,16,34,39,47,48,49,50,52,54,55,56,58,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[9,22,47,59,47,47,47,47,47,47,47,47,82,47,47,47,47,47,47,47,47,47,47,47,47,-25,47,47,47,47,-24,47,47,47,47,47,47,47,47,47,]),'INHERITS':([7,],[10,]),'RBRACE':([9,11,12,13,19,22,23,29,40,42,43,44,45,46,51,71,77,78,79,80,83,84,91,92,93,94,95,96,97,98,100,101,106,108,112,124,125,131,139,142,150,153,157,162,],[-63,17,-6,-7,-9,-63,-8,35,-17,-18,-19,-20,-21,-22,-44,98,-59,-60,-61,-62,107,-26,-34,-35,-36,-37,-38,-39,-40,-23,-25,-41,119,-33,-24,-43,-55,-27,-52,-42,-32,-51,-54,-53,]),'ID':([9,12,19,20,22,23,32,34,47,48,49,50,52,54,55,56,57,59,60,61,62,64,65,66,67,68,69,70,71,82,100,102,103,104,109,110,111,112,115,116,123,126,128,129,130,132,143,145,146,147,148,149,158,159,160,],[15,15,-9,24,15,-8,24,40,40,40,40,40,40,40,40,40,81,40,40,40,89,40,40,40,40,40,40,40,40,40,-25,40,40,117,40,40,122,-24,117,-57,40,-56,135,40,40,40,40,40,135,135,135,40,-58,40,40,]),'LPAREN':([15,34,40,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,89,100,102,103,109,110,112,122,123,129,130,132,143,145,149,159,160,],[20,48,61,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,110,-25,48,48,48,48,-24,132,48,48,48,48,48,48,48,48,48,]),'COLON':([15,24,26,31,81,117,135,],[21,30,33,37,105,127,144,]),'RPAREN':([20,25,27,36,38,40,42,43,44,45,46,51,61,73,77,78,79,80,84,85,86,87,88,91,92,93,94,95,96,97,98,101,108,110,120,121,124,125,131,132,139,141,142,150,153,157,162,],[26,31,-15,-16,-14,-17,-18,-19,-20,-21,-22,-44,-63,101,-59,-60,-61,-62,-26,108,-28,-29,-31,-34,-35,-36,-37,-38,-39,-40,-23,-41,-33,-63,-30,131,-43,-55,-27,-63,-52,150,-42,-32,-51,-54,-53,]),'COMMA':([25,27,36,38,40,42,43,44,45,46,51,77,78,79,80,84,86,88,91,92,93,94,95,96,97,98,101,108,118,120,124,125,131,137,138,139,140,142,150,152,153,157,161,162,],[32,-15,-16,-14,-17,-18,-19,-20,-21,-22,-44,-59,-60,-61,-62,-26,109,-31,-34,-35,-36,-37,-38,-39,-40,-23,-41,-33,128,-30,-43,-55,-27,146,147,-52,148,-42,-32,-50,-51,-54,-49,-53,]),'ASSIGN':([28,40,118,152,],[34,60,130,159,]),'INTEGER':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-25,42,42,42,42,-24,42,42,42,42,42,42,42,42,42,]),'TRUE':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-25,43,43,43,43,-24,43,43,43,43,43,43,43,43,43,]),'FALSE':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-25,44,44,44,44,-24,44,44,44,44,44,44,44,44,44,]),'STRING':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-25,45,45,45,45,-24,45,45,45,45,45,45,45,45,45,]),'SELF':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-25,46,46,46,46,-24,46,46,46,46,46,46,46,46,46,]),'IF':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-25,49,49,49,49,-24,49,49,49,49,49,49,49,49,49,]),'WHILE':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-25,50,50,50,50,-24,50,50,50,50,50,50,50,50,50,]),'CASE':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-25,52,52,52,52,-24,52,52,52,52,52,52,52,52,52,]),'NEW':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-25,53,53,53,53,-24,53,53,53,53,53,53,53,53,53,]),'ISVOID':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-25,54,54,54,54,-24,54,54,54,54,54,54,54,54,54,]),'INT_COMP':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-25,55,55,55,55,-24,55,55,55,55,55,55,55,55,55,]),'NOT':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-25,56,56,56,56,-24,56,56,56,56,56,56,56,56,56,]),'LET':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,100,102,103,109,110,112,123,129,130,132,143,145,149,159,160,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-25,57,57,57,57,-24,57,57,57,57,57,57,57,57,57,]),'DOT':([40,41,42,43,44,45,46,51,72,73,74,75,76,77,78,79,80,83,84,88,90,91,92,93,94,95,96,97,98,99,101,106,108,113,114,120,124,125,131,133,139,140,142,150,151,153,157,161,162,],[-17,62,-18,-19,-20,-21,-22,-44,62,62,62,62,62,-59,62,62,62,62,62,62,111,62,62,62,62,62,62,62,-23,62,-41,62,-33,62,62,62,-43,-55,-27,62,62,62,-42,-32,62,62,62,62,62,]),'AT':([40,41,42,43,44,45,46,51,72,73,74,75,76,77,78,79,80,83,84,88,91,92,93,94,95,96,97,98,99,101,106,108,113,114,120,124,125,131,133,139,140,142,150,151,153,157,161,162,],[-17,63,-18,-19,-20,-21,-22,-44,63,63,63,63,63,-59,63,63,63,63,63,63,63,63,63,63,63,63,63,-23,63,-41,63,-33,63,63,63,-43,-55,-27,63,63,63,-42,-32,63,63,63,63,63,]),'PLUS':([40,41,42,43,44,45,46,51,72,73,74,75,76,77,78,79,80,83,84,88,91,92,93,94,95,96,97,98,99,101,106,108,113,114,120,124,125,131,133,139,140,142,150,151,153,157,161,162,],[-17,64,-18,-19,-20,-21,-22,-44,64,64,64,64,64,-59,64,64,64,64,64,64,64,64,64,64,64,64,64,-23,64,-41,64,-33,64,64,64,-43,-55,-27,64,64,64,-42,-32,64,64,64,64,64,]),'MINUS':([40,41,42,43,44,45,46,51,72,73,74,75,76,77,78,79,80,83,84,88,91,92,93,94,95,96,97,98,99,101,106,108,113,114,120,124,125,131,133,139,140,142,150,151,153,157,161,162,],[-17,65,-18,-19,-20,-21,-22,-44,65,65,65,65,65,-59,65,65,65,65,65,65,65,65,65,65,65,65,65,-23,65,-41,65,-33,65,65,65,-43,-55,-27,65,65,65,-42,-32,65,65,65,65,65,]),'MULTIPLY':([40,41,42,43,44,45,46,51,72,73,74,75,76,77,78,79,80,83,84,88,91,92,93,94,95,96,97,98,99,101,106,108,113,114,120,124,125,131,133,139,140,142,150,151,153,157,161,162,],[-17,66,-18,-19,-20,-21,-22,-44,66,66,66,66,66,-59,66,66,66,66,66,66,66,66,66,66,66,66,66,-23,66,-41,66,-33,66,66,66,-43,-55,-27,66,66,66,-42,-32,66,66,66,66,66,]),'DIVIDE':([40,41,42,43,44,45,46,51,72,73,74,75,76,77,78,79,80,83,84,88,91,92,93,94,95,96,97,98,99,101,106,108,113,114,120,124,125,131,133,139,140,142,150,151,153,157,161,162,],[-17,67,-18,-19,-20,-21,-22,-44,67,67,67,67,67,-59,67,67,67,67,67,67,67,67,67,67,67,67,67,-23,67,-41,67,-33,67,67,67,-43,-55,-27,67,67,67,-42,-32,67,67,67,67,67,]),'LT':([40,41,42,43,44,45,46,51,72,73,74,75,76,77,78,79,80,83,84,88,91,92,93,94,95,96,97,98,99,101,106,108,113,114,120,124,125,131,133,139,140,142,150,151,153,157,161,162,],[-17,68,-18,-19,-20,-21,-22,-44,68,68,68,68,68,-59,68,68,68,68,68,68,68,68,68,68,68,68,68,-23,68,-41,68,-33,68,68,68,-43,-55,-27,68,68,68,-42,-32,68,68,68,68,68,]),'LTEQ':([40,41,42,43,44,45,46,51,72,73,74,75,76,77,78,79,80,83,84,88,91,92,93,94,95,96,97,98,99,101,106,108,113,114,120,124,125,131,133,139,140,142,150,151,153,157,161,162,],[-17,69,-18,-19,-20,-21,-22,-44,69,69,69,69,69,-59,69,69,69,69,69,69,69,69,69,69,69,69,69,-23,69,-41,69,-33,69,69,69,-43,-55,-27,69,69,69,-42,-32,69,69,69,69,69,]),'EQ':([40,41,42,43,44,45,46,51,72,73,74,75,76,77,78,79,80,83,84,88,91,92,93,94,95,96,97,98,99,101,106,108,113,114,120,124,125,131,133,139,140,142,150,151,153,157,161,162,],[-17,70,-18,-19,-20,-21,-22,-44,70,70,70,70,70,-59,70,70,70,70,70,70,70,70,70,70,70,70,70,-23,70,-41,70,-33,70,70,70,-43,-55,-27,70,70,70,-42,-32,70,70,70,70,70,]),'THEN':([40,42,43,44,45,46,51,74,77,78,79,80,84,91,92,93,94,95,96,97,98,101,108,124,125,131,139,142,150,153,157,162,],[-17,-18,-19,-20,-21,-22,-44,102,-59,-60,-61,-62,-26,-34,-35,-36,-37,-38,-39,-40,-23,-41,-33,-43,-55,-27,-52,-42,-32,-51,-54,-53,]),'LOOP':([40,42,43,44,45,46,51,75,77,78,79,80,84,91,92,93,94,95,96,97,98,101,108,124,125,131,139,142,150,153,157,162,],[-17,-18,-19,-20,-21,-22,-44,103,-59,-60,-61,-62,-26,-34,-35,-36,-37,-38,-39,-40,-23,-41,-33,-43,-55,-27,-52,-42,-32,-51,-54,-53,]),'OF':([40,42,43,44,45,46,51,76,77,78,79,80,84,91,92,93,94,95,96,97,98,101,108,124,125,131,139,142,150,153,157,162,],[-17,-18,-19,-20,-21,-22,-44,104,-59,-60,-61,-62,-26,-34,-35,-36,-37,-38,-39,-40,-23,-41,-33,-43,-55,-27,-52,-42,-32,-51,-54,-53,]),'ELSE':([40,42,43,44,45,46,51,77,78,79,80,84,91,92,93,94,95,96,97,98,101,108,113,124,125,131,139,142,150,153,157,162,],[-17,-18,-19,-20,-21,-22,-44,-59,-60,-61,-62,-26,-34,-35,-36,-37,-38,-39,-40,-23,-41,-33,123,-43,-55,-27,-52,-42,-32,-51,-54,-53,]),'POOL':([40,42,43,44,45,46,51,77,78,79,80,84,91,92,93,94,95,96,97,98,101,108,114,124,125,131,139,142,150,153,157,162,],[-17,-18,-19,-20,-21,-22,-44,-59,-60,-61,-62,-26,-34,-35,-36,-37,-38,-39,-40,-23,-41,-33,124,-43,-55,-27,-52,-42,-32,-51,-54,-53,]),'FI':([40,42,43,44,45,46,51,77,78,79,80,84,91,92,93,94,95,96,97,98,101,108,124,125,131,133,139,142,150,153,157,162,],[-17,-18,-19,-20,-21,-22,-44,-59,-60,-61,-62,-26,-34,-35,-36,-37,-38,-39,-40,-23,-41,-33,-43,-55,-27,142,-52,-42,-32,-51,-54,-53,]),'IN':([40,42,43,44,45,46,51,77,78,79,80,84,91,92,93,94,95,96,97,98,101,108,118,124,125,131,136,137,138,139,140,142,150,152,153,154,155,156,157,161,162,],[-17,-18,-19,-20,-21,-22,-44,-59,-60,-61,-62,-26,-34,-35,-36,-37,-38,-39,-40,-23,-41,-33,129,-43,-55,-27,145,-47,-48,-52,149,-42,-32,-50,-51,-45,-46,160,-54,-49,-53,]),'ESAC':([115,116,126,158,],[125,-57,-56,-58,]),'ARROW':([134,],[143,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'classes':([0,],[2,]),'class':([0,2,],[3,5,]),'features_list_init':([9,22,],[11,29,]),'features_list':([9,22,],[12,12,]),'empty':([9,22,61,110,132,],[13,13,87,87,87,]),'feature':([9,12,22,],[14,18,14,]),'params_list':([20,],[25,]),'params':([20,32,],[27,38,]),'expression':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,102,103,109,110,123,129,130,132,143,145,149,159,160,],[41,72,73,74,75,76,78,79,80,83,84,88,91,92,93,94,95,96,97,99,106,113,114,120,88,133,139,140,88,151,153,157,161,162,]),'let_expression':([34,47,48,49,50,52,54,55,56,59,60,61,64,65,66,67,68,69,70,71,82,102,103,109,110,123,129,130,132,143,145,149,159,160,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'block':([47,],[71,]),'arguments_list_init':([61,110,132,],[85,121,141,]),'arguments_list':([61,110,132,],[86,86,86,]),'actions':([104,],[115,]),'action':([104,115,],[116,126,]),'let_expression_heads':([128,146,147,148,],[136,154,155,156,]),'let_expression_head_i':([128,146,147,148,],[137,137,137,137,]),'let_expression_head':([128,146,147,148,],[138,138,138,138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes','program',1,'p_program','parsing.py',18),
  ('classes -> classes class SEMICOLON','classes',3,'p_classes','parsing.py',24),
  ('classes -> class SEMICOLON','classes',2,'p_classes','parsing.py',25),
  ('class -> CLASS TYPE LBRACE features_list_init RBRACE','class',5,'p_class','parsing.py',34),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE features_list_init RBRACE','class',7,'p_class_inherits','parsing.py',40),
  ('features_list_init -> features_list','features_list_init',1,'p_feature_list_init','parsing.py',46),
  ('features_list_init -> empty','features_list_init',1,'p_feature_list_init','parsing.py',47),
  ('features_list -> features_list feature SEMICOLON','features_list',3,'p_feature_list','parsing.py',53),
  ('features_list -> feature SEMICOLON','features_list',2,'p_feature_list','parsing.py',54),
  ('feature -> ID LPAREN params_list RPAREN COLON TYPE LBRACE expression RBRACE','feature',9,'p_feature_method','parsing.py',63),
  ('feature -> ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE','feature',8,'p_feature_method_no_params','parsing.py',69),
  ('feature -> ID COLON TYPE ASSIGN expression','feature',5,'p_feature_attribute_initialized','parsing.py',75),
  ('feature -> ID COLON TYPE','feature',3,'p_feature_attr','parsing.py',81),
  ('params_list -> params_list COMMA params','params_list',3,'p_params_list','parsing.py',87),
  ('params_list -> params','params_list',1,'p_params_list','parsing.py',88),
  ('params -> ID COLON TYPE','params',3,'p_param','parsing.py',97),
  ('expression -> ID','expression',1,'p_expression_object_identifier','parsing.py',103),
  ('expression -> INTEGER','expression',1,'p_expression_integer','parsing.py',115),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parsing.py',121),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parsing.py',122),
  ('expression -> STRING','expression',1,'p_expression_string','parsing.py',129),
  ('expression -> SELF','expression',1,'p_expr_self','parsing.py',135),
  ('expression -> LBRACE block RBRACE','expression',3,'p_expr_block','parsing.py',141),
  ('block -> block expression SEMICOLON','block',3,'p_block','parsing.py',159),
  ('block -> expression SEMICOLON','block',2,'p_block','parsing.py',160),
  ('expression -> ID ASSIGN expression','expression',3,'p_expr_assignment','parsing.py',169),
  ('expression -> expression DOT ID LPAREN arguments_list_init RPAREN','expression',6,'p_expr_dispatch','parsing.py',175),
  ('arguments_list_init -> arguments_list','arguments_list_init',1,'p_arguments_list_init','parsing.py',181),
  ('arguments_list_init -> empty','arguments_list_init',1,'p_arguments_list_init','parsing.py',182),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','parsing.py',188),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','parsing.py',189),
  ('expression -> expression AT TYPE DOT ID LPAREN arguments_list_init RPAREN','expression',8,'p_expr_static_dispatch','parsing.py',198),
  ('expression -> ID LPAREN arguments_list_init RPAREN','expression',4,'p_expr_self_dispatch','parsing.py',204),
  ('expression -> expression PLUS expression','expression',3,'p_expr_math_operations','parsing.py',210),
  ('expression -> expression MINUS expression','expression',3,'p_expr_math_operations','parsing.py',211),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expr_math_operations','parsing.py',212),
  ('expression -> expression DIVIDE expression','expression',3,'p_expr_math_operations','parsing.py',213),
  ('expression -> expression LT expression','expression',3,'p_expr_math_comparisons','parsing.py',226),
  ('expression -> expression LTEQ expression','expression',3,'p_expr_math_comparisons','parsing.py',227),
  ('expression -> expression EQ expression','expression',3,'p_expr_math_comparisons','parsing.py',228),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expr_with_parenthesis','parsing.py',239),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expr_if_conditional','parsing.py',245),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_expr_while_loop','parsing.py',251),
  ('expression -> let_expression','expression',1,'p_expr_let','parsing.py',257),
  ('let_expression_heads -> let_expression_head_i COMMA let_expression_heads','let_expression_heads',3,'p_expr_let_heads','parsing.py',263),
  ('let_expression_heads -> let_expression_head COMMA let_expression_heads','let_expression_heads',3,'p_expr_let_heads','parsing.py',264),
  ('let_expression_heads -> let_expression_head_i','let_expression_heads',1,'p_expr_let_heads_end','parsing.py',270),
  ('let_expression_heads -> let_expression_head','let_expression_heads',1,'p_expr_let_heads_end','parsing.py',271),
  ('let_expression_head_i -> ID COLON TYPE ASSIGN expression','let_expression_head_i',5,'p_expr_let_head_i','parsing.py',277),
  ('let_expression_head -> ID COLON TYPE','let_expression_head',3,'p_expr_let_head','parsing.py',283),
  ('let_expression -> LET ID COLON TYPE COMMA let_expression_heads IN expression','let_expression',8,'p_expr_let_simple','parsing.py',289),
  ('let_expression -> LET ID COLON TYPE IN expression','let_expression',6,'p_expr_let_simple','parsing.py',290),
  ('let_expression -> LET ID COLON TYPE ASSIGN expression COMMA let_expression_heads IN expression','let_expression',10,'p_expr_let_initialized','parsing.py',299),
  ('let_expression -> LET ID COLON TYPE ASSIGN expression IN expression','let_expression',8,'p_expr_let_initialized','parsing.py',300),
  ('expression -> CASE expression OF actions ESAC','expression',5,'p_expr_case','parsing.py',309),
  ('actions -> actions action','actions',2,'p_actions_list','parsing.py',315),
  ('actions -> action','actions',1,'p_actions_list','parsing.py',316),
  ('action -> ID COLON TYPE ARROW expression SEMICOLON','action',6,'p_action_expr','parsing.py',325),
  ('expression -> NEW TYPE','expression',2,'p_expr_new','parsing.py',331),
  ('expression -> ISVOID expression','expression',2,'p_expr_isvoid','parsing.py',337),
  ('expression -> INT_COMP expression','expression',2,'p_expr_integer_complement','parsing.py',343),
  ('expression -> NOT expression','expression',2,'p_expr_boolean_complement','parsing.py',349),
  ('empty -> <empty>','empty',0,'p_empty','parsing.py',355),
]
