.data
_abort: .asciiz "Program Aborted"
_zero: .asciiz "0 Division Error"
_substr: .asciiz "Substr Length Error"
_mem: .asciiz "Memory Error"

_Void: .asciiz "Void"
_Object: .asciiz "Object"
_Int: .asciiz "Int"
_Bool: .asciiz "Bool"
_String: .asciiz "String"
_IO: .asciiz "IO"
_Main: .asciiz "Main"
_A: .asciiz "A"
_B: .asciiz "B"
_C: .asciiz "C"
# VISITING ALL THE DATA NODES
data_0: .asciiz ""
data_1: .asciiz "     "
data_2: .asciiz "     "
data_3: .asciiz "     "
.text
main:
move $s7 $gp
addi $s7 $s7 30000
# SAVE A REFERENCE TO ALL THE PROTOTYPES IN $s6
li $a0 80
jal mem_alloc
move $s6 $a0

# SAVE A REFERENCE TO ALL THE TYPES-NAMES IN $s5
li $a0 40
jal mem_alloc
move $s5 $a0

# SAVE A REFERENCE TO ALL THE PARENTS PROTOTYPES IN $s4
li $a0 40
jal mem_alloc
move $s4 $a0

# VISITING ALL THE TYPES NODES
#Void
li $a0 12 #reservo mem para Void
jal mem_alloc
move $t0 $a0
li $t1 0
sw $t1 ($t0)
li $t1 12
sw $t1 4($t0) # guardo el size

# CREATING VIRTUAL TABLE METHOD
li $a0 0
jal mem_alloc


sw $a0 8($t0)
sw $t0 0($s6)

la $t0 ctor_Void
sw $t0 4($s6)

la $t0 _Void
sw $t0 0($s5)

lw $t0 0($s6)
sw $t0 0($s4)

#Object
li $a0 12 #reservo mem para Object
jal mem_alloc
move $t0 $a0
li $t1 1
sw $t1 ($t0)
li $t1 12
sw $t1 4($t0) # guardo el size

# CREATING VIRTUAL TABLE METHOD
li $a0 12
jal mem_alloc

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 type_name_95
sw $t1 0($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 copy_96
sw $t1 4($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 abort_97
sw $t1 8($a0)


sw $a0 8($t0)
sw $t0 8($s6)

la $t0 ctor_Object
sw $t0 12($s6)

la $t0 _Object
sw $t0 4($s5)

lw $t0 0($s6)
sw $t0 4($s4)

#Int
li $a0 16 #reservo mem para Int
jal mem_alloc
move $t0 $a0
li $t1 2
sw $t1 ($t0)
li $t1 16
sw $t1 4($t0) # guardo el size

# CREATING VIRTUAL TABLE METHOD
li $a0 12
jal mem_alloc

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 type_name_95
sw $t1 0($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 copy_96
sw $t1 4($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 abort_97
sw $t1 8($a0)


sw $a0 8($t0)
sw $t0 16($s6)

la $t0 ctor_Int
sw $t0 20($s6)

la $t0 _Int
sw $t0 8($s5)

lw $t0 8($s6)
sw $t0 8($s4)

#Bool
li $a0 16 #reservo mem para Bool
jal mem_alloc
move $t0 $a0
li $t1 3
sw $t1 ($t0)
li $t1 16
sw $t1 4($t0) # guardo el size

# CREATING VIRTUAL TABLE METHOD
li $a0 12
jal mem_alloc

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 type_name_95
sw $t1 0($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 copy_96
sw $t1 4($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 abort_97
sw $t1 8($a0)


sw $a0 8($t0)
sw $t0 24($s6)

la $t0 ctor_Bool
sw $t0 28($s6)

la $t0 _Bool
sw $t0 12($s5)

lw $t0 8($s6)
sw $t0 12($s4)

#String
li $a0 16 #reservo mem para String
jal mem_alloc
move $t0 $a0
li $t1 4
sw $t1 ($t0)
li $t1 16
sw $t1 4($t0) # guardo el size

# CREATING VIRTUAL TABLE METHOD
li $a0 24
jal mem_alloc

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 type_name_95
sw $t1 0($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 copy_96
sw $t1 4($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 abort_97
sw $t1 8($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 concat_98
sw $t1 12($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 substr_99
sw $t1 16($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 length_100
sw $t1 20($a0)


sw $a0 8($t0)
sw $t0 32($s6)

la $t0 ctor_String
sw $t0 36($s6)

la $t0 _String
sw $t0 16($s5)

lw $t0 8($s6)
sw $t0 16($s4)

#IO
li $a0 12 #reservo mem para IO
jal mem_alloc
move $t0 $a0
li $t1 5
sw $t1 ($t0)
li $t1 12
sw $t1 4($t0) # guardo el size

# CREATING VIRTUAL TABLE METHOD
li $a0 28
jal mem_alloc

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 type_name_95
sw $t1 0($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 copy_96
sw $t1 4($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 abort_97
sw $t1 8($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 out_string_101
sw $t1 12($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 out_int_102
sw $t1 16($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 in_string_103
sw $t1 20($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 in_int_104
sw $t1 24($a0)


sw $a0 8($t0)
sw $t0 40($s6)

la $t0 ctor_IO
sw $t0 44($s6)

la $t0 _IO
sw $t0 20($s5)

lw $t0 8($s6)
sw $t0 20($s4)

#Main
li $a0 12 #reservo mem para Main
jal mem_alloc
move $t0 $a0
li $t1 6
sw $t1 ($t0)
li $t1 12
sw $t1 4($t0) # guardo el size

# CREATING VIRTUAL TABLE METHOD
li $a0 20
jal mem_alloc

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 type_name_95
sw $t1 0($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 copy_96
sw $t1 4($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 abort_97
sw $t1 8($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 sum_105
sw $t1 12($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 main_106
sw $t1 16($a0)


sw $a0 8($t0)
sw $t0 48($s6)

la $t0 ctor_Main
sw $t0 52($s6)

la $t0 _Main
sw $t0 24($s5)

lw $t0 8($s6)
sw $t0 24($s4)

#A
li $a0 16 #reservo mem para A
jal mem_alloc
move $t0 $a0
li $t1 7
sw $t1 ($t0)
li $t1 16
sw $t1 4($t0) # guardo el size

# CREATING VIRTUAL TABLE METHOD
li $a0 16
jal mem_alloc

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 type_name_95
sw $t1 0($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 copy_96
sw $t1 4($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 abort_97
sw $t1 8($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 sum_107
sw $t1 12($a0)


sw $a0 8($t0)
sw $t0 56($s6)

la $t0 ctor_A
sw $t0 60($s6)

la $t0 _A
sw $t0 28($s5)

lw $t0 8($s6)
sw $t0 28($s4)

#B
li $a0 16 #reservo mem para B
jal mem_alloc
move $t0 $a0
li $t1 8
sw $t1 ($t0)
li $t1 16
sw $t1 4($t0) # guardo el size

# CREATING VIRTUAL TABLE METHOD
li $a0 20
jal mem_alloc

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 type_name_95
sw $t1 0($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 copy_96
sw $t1 4($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 abort_97
sw $t1 8($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 sum_108
sw $t1 12($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 mult_109
sw $t1 16($a0)


sw $a0 8($t0)
sw $t0 64($s6)

la $t0 ctor_B
sw $t0 68($s6)

la $t0 _B
sw $t0 32($s5)

lw $t0 56($s6)
sw $t0 32($s4)

#C
li $a0 16 #reservo mem para C
jal mem_alloc
move $t0 $a0
li $t1 9
sw $t1 ($t0)
li $t1 16
sw $t1 4($t0) # guardo el size

# CREATING VIRTUAL TABLE METHOD
li $a0 20
jal mem_alloc

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 type_name_95
sw $t1 0($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 copy_96
sw $t1 4($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 abort_97
sw $t1 8($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 sum_110
sw $t1 12($a0)

# SAVING THE OFFSET OF EVERY FUNCTION IN THE TYPE
la $t1 mult_109
sw $t1 16($a0)


sw $a0 8($t0)
sw $t0 72($s6)

la $t0 ctor_C
sw $t0 76($s6)

la $t0 _C
sw $t0 36($s5)

lw $t0 64($s6)
sw $t0 36($s4)

#empieza esta pinga
lw $a0 48($s6)
jal obj_copy
move $a2 $a0
# PUSHING $a0
sw $a0 0($sp)
addiu $sp $sp -4
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 52($s6)
jalr $t0
addi $sp $sp -8
lw $t0 48($s6)
lw $t0 8($t0)
lw $t0 16($t0)
jalr $t0
lw $a0 12($a0)
b _end_main
# END MAIN
# VISITING ALL THE FUNCTIONS NODES
ctor_Void:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp 0
lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 12
jr $ra

ctor_Object:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp 0
lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 12
jr $ra

type_name_95:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -4
# CREATES A STRING WITH THE TYPE NAME
lw $a0 12($fp)
lw $t7 ($a0)
sll $t7 $t7 2
move $t6 $s5
add $t6 $t6 $t7
lw $a0 ($t6)
move $a2 $a0
jal len

addi $t7 $t0 16
li $t6 4
rem $t5 $t7 $t6
sub $t6 $t6 $t5
add $t7 $t7 $t6
move $a0 $t7
jal mem_alloc
move $a1 $a0
li $t6 4
sw $t6 ($a1)
sw $t7 4($a1)
lw $t7 32($s6)
lw $t7 8($t7)
sw $t7 8($a1)
addi $t0 $t0 -1
# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t0 12($a0)
sw $a0 12($a1)
move $a0 $a1
addi $a1 $a1 16

type_name0:
lb $v0 ($a2)
sb $v0 ($a1)
addi $a1 $a1 1
addi $a2 $a2 1
addi $t0 $t0 -1
bnez $t0 type_name0

li $t7 0
sb $t7 ($a1)
sw $a0 0($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 0($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 16
jr $ra

copy_96:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -4
# COPIES AN OBJECT
lw $a0 12($fp)
sll $t0 $a0 3
lw $t1 ($s6)
add $t1 $t1 $t0
move $a0 $t1
jal obj_copy
sw $a0 0($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 0($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 16
jr $ra

abort_97:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp 0
# ABORT
la $a0 _abort
li $v0 4
syscall
li $v0 10
syscall

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 12
jr $ra

ctor_Int:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp 0
# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 12($fp)
addi $t1 $t1 12

li $t0 0
sw $t0 ($t1)
lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 12
jr $ra

ctor_Bool:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp 0
# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 12($fp)
addi $t1 $t1 12

li $t0 0
sw $t0 ($t1)
lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 12
jr $ra

ctor_String:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp 0
# CMP CREATE A NEW STRING PROTOYPE IN HEAP AND STORE ITS VALUE
li $a0 20
jal mem_alloc
move $a1 $a0
li $t7 4
sw $t7 ($a1)
li $t7 20
sw $t7 4($a1)
lw $t7 32($s6)
lw $t7 8($t7)
sw $t7 8($a1)
li $t7 0
# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t7 12($a0)
sw $a0 12($a1)
li $t7 0
sb $t7 16($a1)
move $a0 $a1
sw $a0 12($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 12
jr $ra

concat_98:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -4
# CONCAT => STR1 + STR2
lw $v0 12($fp)
lw $v1 16($fp)
jal str_concat
sw $a0 0($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 0($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 20
jr $ra

substr_99:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -4
# SUBSTR => CREATES A NEW STRING FROM POS I AND WITH LENGTH X FROM A STRING
lw $v0 12($fp)
lw $t0 16($fp)
lw $t1 20($fp)
jal str_substr
sw $a0 0($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 0($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 24
jr $ra

length_100:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -4
# GIVES A STRING LENGTH (A REF TO INT)
lw $a0 12($fp)
lw $a0 12($t0)

sw $a0 0($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 0($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 16
jr $ra

ctor_IO:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp 0
lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 12
jr $ra

out_string_101:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp 0
# PRINTS A STRING IN CONSOLE
lw $a0 16($fp)
addi $a0 $a0 16
li $v0 4
syscall

# SAVES IN $a0 THE RETURN VALUE
lw $a0 12($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 16
jr $ra

out_int_102:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp 0
# PRINTS AN INT
lw $a0 16($fp)
lw $a0 12($a0)
li $v0 1
syscall

# SAVES IN $a0 THE RETURN VALUE
lw $a0 12($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 16
jr $ra

in_string_103:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -4
# READS A STRING FROM CONSOLE AND CREATES A STRING OBJECT TO SAVE IT
li $a0 1024
li $a1 1024
li $v0 8
syscall

move $t1 $a0
jal len
addi $t0 $t0 -2

# CREATE A NEW STRING PROTOYPE IN HEAP AND STORE ITS VALUE
addi $t5 $t0 1
# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t0 12($a0)
move $a1 $a0
li $a0 0
addi $t5 $t5 16
add $a0 $a0 $t5
jal mem_alloc
li $t6 4
sw $t6 ($a0)
sw $t5 4($a0)
sw $a1 12($a0)
lw $t6 32($s6)
lw $t7 8($t6)
sw $t7 8($a0)
move $t0 $t0

move $a1 $a0
addi $a0 $a0 16

in_str1:
lb $v0 ($t1)
sb $v0 ($a0)
addi $t1 $t1 1
addi $a0 $a0 1
addi $t0 $t0 -1
bnez $t0 in_str1

sw $a1 0($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 0($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 16
jr $ra

in_int_104:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -4
# READS AN INT AND SAVE IT IN AN INT OBJECT
li $v0 5
syscall
move $t0 $a0

# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $v0 12($a0)

sw $a0 0($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 0($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 16
jr $ra

ctor_Main:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp 0
lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 12
jr $ra

sum_105:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -12
# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 16($s6)
jal obj_copy
sw $a0 0($fp)

lw $t0 0($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 20($s6)
jalr $t0
sw $a0 -4($fp)

# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 0($fp)
addi $t1 $t1 12

li $t0 10
sw $t0 ($t1)
# PLUS NODE
lw $t1 16($fp)
lw $t1 12($t1)
lw $t2 0($fp)
lw $t2 12($t2)
add $t1 $t1 $t2

# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t1 12($a0)

sw $a0 -8($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 -8($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 28
jr $ra

main_106:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -256
# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 40($s6)
jal obj_copy
sw $a0 -4($fp)

lw $t0 -4($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 44($s6)
jalr $t0
sw $a0 -8($fp)

lw $t0 -4($fp)
lw $t0 ($t0)

sll $t0 $t0 3
move $t1 $s6
add $t0 $t0 $t1
lw $t0 ($t0)

sw $t0 -12($fp)

# IS TYPE
li $t0 0
lw $t1 -12($fp)
lw $t1 ($t1)
seq $t2 $t1 $t0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t2 12($a0)
sw $a0 -16($fp)

# IF X(BOOL) GOTO DIR(label_0)
lw $t0 -16($fp)
lw $t0 12($t0)
bnez $t0 label_0

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 72($s6)
jal obj_copy
sw $a0 -24($fp)

lw $t0 -24($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 76($s6)
jalr $t0
sw $a0 -28($fp)

lw $t0 -24($fp)
lw $t0 ($t0)

sll $t0 $t0 3
move $t1 $s6
add $t0 $t0 $t1
lw $t0 ($t0)

sw $t0 -32($fp)

# IS TYPE
li $t0 0
lw $t1 -32($fp)
lw $t1 ($t1)
seq $t2 $t1 $t0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t2 12($a0)
sw $a0 -36($fp)

# IF X(BOOL) GOTO DIR(label_2)
lw $t0 -36($fp)
lw $t0 12($t0)
bnez $t0 label_2

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 16($s6)
jal obj_copy
sw $a0 -40($fp)

lw $t0 -40($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 20($s6)
jalr $t0
sw $a0 -44($fp)

# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 -40($fp)
addi $t1 $t1 12

li $t0 10
sw $t0 ($t1)
lw $t0 -40($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

lw $t0 -24($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 12($v0)
jalr $v0
sw $a0 -20($fp)

# GOTO
b label_3

label_2:

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 8($v0)
jalr $v0
sw $a0 -20($fp)

# GOTO
b label_3

label_3:

lw $t0 -20($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

lw $t0 -4($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 16($v0)
jalr $v0
sw $a0 0($fp)

# GOTO
b label_1

label_0:

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 8($v0)
jalr $v0
sw $a0 0($fp)

# GOTO
b label_1

label_1:

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 40($s6)
jal obj_copy
sw $a0 -52($fp)

lw $t0 -52($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 44($s6)
jalr $t0
sw $a0 -56($fp)

lw $t0 -52($fp)
lw $t0 ($t0)

sll $t0 $t0 3
move $t1 $s6
add $t0 $t0 $t1
lw $t0 ($t0)

sw $t0 -60($fp)

# IS TYPE
li $t0 0
lw $t1 -60($fp)
lw $t1 ($t1)
seq $t2 $t1 $t0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t2 12($a0)
sw $a0 -64($fp)

# IF X(BOOL) GOTO DIR(label_4)
lw $t0 -64($fp)
lw $t0 12($t0)
bnez $t0 label_4

# CMP CREATE A NEW STRING PROTOYPE IN HEAP AND STORE ITS VALUE
li $a0 24
jal mem_alloc
move $a1 $a0
li $t7 4
sw $t7 ($a1)
li $t7 24
sw $t7 4($a1)
lw $t7 32($s6)
lw $t7 8($t7)
sw $t7 8($a1)
li $t7 5
# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t7 12($a0)
sw $a0 12($a1)
li $t7 32
sb $t7 16($a1)
li $t7 32
sb $t7 17($a1)
li $t7 32
sb $t7 18($a1)
li $t7 32
sb $t7 19($a1)
li $t7 32
sb $t7 20($a1)
li $t7 0
sb $t7 21($a1)
move $a0 $a1
sw $a0 -68($fp)

lw $t0 -68($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

lw $t0 -52($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 12($v0)
jalr $v0
sw $a0 -48($fp)

# GOTO
b label_5

label_4:

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 8($v0)
jalr $v0
sw $a0 -48($fp)

# GOTO
b label_5

label_5:

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 40($s6)
jal obj_copy
sw $a0 -76($fp)

lw $t0 -76($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 44($s6)
jalr $t0
sw $a0 -80($fp)

lw $t0 -76($fp)
lw $t0 ($t0)

sll $t0 $t0 3
move $t1 $s6
add $t0 $t0 $t1
lw $t0 ($t0)

sw $t0 -84($fp)

# IS TYPE
li $t0 0
lw $t1 -84($fp)
lw $t1 ($t1)
seq $t2 $t1 $t0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t2 12($a0)
sw $a0 -88($fp)

# IF X(BOOL) GOTO DIR(label_6)
lw $t0 -88($fp)
lw $t0 12($t0)
bnez $t0 label_6

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 72($s6)
jal obj_copy
sw $a0 -96($fp)

lw $t0 -96($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 76($s6)
jalr $t0
sw $a0 -100($fp)

lw $t0 -96($fp)
lw $t0 ($t0)

sll $t0 $t0 3
move $t1 $s6
add $t0 $t0 $t1
lw $t0 ($t0)

sw $t0 -104($fp)

# IS TYPE
li $t0 0
lw $t1 -104($fp)
lw $t1 ($t1)
seq $t2 $t1 $t0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t2 12($a0)
sw $a0 -108($fp)

# IF X(BOOL) GOTO DIR(label_8)
lw $t0 -108($fp)
lw $t0 12($t0)
bnez $t0 label_8

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 16($s6)
jal obj_copy
sw $a0 -112($fp)

lw $t0 -112($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 20($s6)
jalr $t0
sw $a0 -116($fp)

# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 -112($fp)
addi $t1 $t1 12

li $t0 2
sw $t0 ($t1)
lw $t0 -112($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

lw $t0 -96($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 16($v0)
jalr $v0
sw $a0 -92($fp)

# GOTO
b label_9

label_8:

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 8($v0)
jalr $v0
sw $a0 -92($fp)

# GOTO
b label_9

label_9:

lw $t0 -92($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

lw $t0 -76($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 16($v0)
jalr $v0
sw $a0 -72($fp)

# GOTO
b label_7

label_6:

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 8($v0)
jalr $v0
sw $a0 -72($fp)

# GOTO
b label_7

label_7:

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 40($s6)
jal obj_copy
sw $a0 -124($fp)

lw $t0 -124($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 44($s6)
jalr $t0
sw $a0 -128($fp)

lw $t0 -124($fp)
lw $t0 ($t0)

sll $t0 $t0 3
move $t1 $s6
add $t0 $t0 $t1
lw $t0 ($t0)

sw $t0 -132($fp)

# IS TYPE
li $t0 0
lw $t1 -132($fp)
lw $t1 ($t1)
seq $t2 $t1 $t0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t2 12($a0)
sw $a0 -136($fp)

# IF X(BOOL) GOTO DIR(label_10)
lw $t0 -136($fp)
lw $t0 12($t0)
bnez $t0 label_10

# CMP CREATE A NEW STRING PROTOYPE IN HEAP AND STORE ITS VALUE
li $a0 24
jal mem_alloc
move $a1 $a0
li $t7 4
sw $t7 ($a1)
li $t7 24
sw $t7 4($a1)
lw $t7 32($s6)
lw $t7 8($t7)
sw $t7 8($a1)
li $t7 5
# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t7 12($a0)
sw $a0 12($a1)
li $t7 32
sb $t7 16($a1)
li $t7 32
sb $t7 17($a1)
li $t7 32
sb $t7 18($a1)
li $t7 32
sb $t7 19($a1)
li $t7 32
sb $t7 20($a1)
li $t7 0
sb $t7 21($a1)
move $a0 $a1
sw $a0 -140($fp)

lw $t0 -140($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

lw $t0 -124($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 12($v0)
jalr $v0
sw $a0 -120($fp)

# GOTO
b label_11

label_10:

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 8($v0)
jalr $v0
sw $a0 -120($fp)

# GOTO
b label_11

label_11:

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 40($s6)
jal obj_copy
sw $a0 -148($fp)

lw $t0 -148($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 44($s6)
jalr $t0
sw $a0 -152($fp)

lw $t0 -148($fp)
lw $t0 ($t0)

sll $t0 $t0 3
move $t1 $s6
add $t0 $t0 $t1
lw $t0 ($t0)

sw $t0 -156($fp)

# IS TYPE
li $t0 0
lw $t1 -156($fp)
lw $t1 ($t1)
seq $t2 $t1 $t0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t2 12($a0)
sw $a0 -160($fp)

# IF X(BOOL) GOTO DIR(label_12)
lw $t0 -160($fp)
lw $t0 12($t0)
bnez $t0 label_12

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 72($s6)
jal obj_copy
sw $a0 -168($fp)

lw $t0 -168($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 76($s6)
jalr $t0
sw $a0 -172($fp)

lw $t0 -168($fp)
lw $t0 ($t0)

sll $t0 $t0 3
move $t1 $s6
add $t0 $t0 $t1
lw $t0 ($t0)

sw $t0 -176($fp)

# IS TYPE
li $t0 0
lw $t1 -176($fp)
lw $t1 ($t1)
seq $t2 $t1 $t0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t2 12($a0)
sw $a0 -180($fp)

# IF X(BOOL) GOTO DIR(label_14)
lw $t0 -180($fp)
lw $t0 12($t0)
bnez $t0 label_14

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 16($s6)
jal obj_copy
sw $a0 -184($fp)

lw $t0 -184($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 20($s6)
jalr $t0
sw $a0 -188($fp)

# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 -184($fp)
addi $t1 $t1 12

li $t0 4
sw $t0 ($t1)
lw $t0 -184($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

lw $t0 -168($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# STATIC CALL

# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4

jal sum_107
sw $a0 -164($fp)

# GOTO
b label_15

label_14:

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 8($v0)
jalr $v0
sw $a0 -164($fp)

label_15:

lw $t0 -164($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

lw $t0 -148($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 16($v0)
jalr $v0
sw $a0 -144($fp)

# GOTO
b label_13

label_12:

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 8($v0)
jalr $v0
sw $a0 -144($fp)

# GOTO
b label_13

label_13:

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 40($s6)
jal obj_copy
sw $a0 -196($fp)

lw $t0 -196($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 44($s6)
jalr $t0
sw $a0 -200($fp)

lw $t0 -196($fp)
lw $t0 ($t0)

sll $t0 $t0 3
move $t1 $s6
add $t0 $t0 $t1
lw $t0 ($t0)

sw $t0 -204($fp)

# IS TYPE
li $t0 0
lw $t1 -204($fp)
lw $t1 ($t1)
seq $t2 $t1 $t0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t2 12($a0)
sw $a0 -208($fp)

# IF X(BOOL) GOTO DIR(label_16)
lw $t0 -208($fp)
lw $t0 12($t0)
bnez $t0 label_16

# CMP CREATE A NEW STRING PROTOYPE IN HEAP AND STORE ITS VALUE
li $a0 24
jal mem_alloc
move $a1 $a0
li $t7 4
sw $t7 ($a1)
li $t7 24
sw $t7 4($a1)
lw $t7 32($s6)
lw $t7 8($t7)
sw $t7 8($a1)
li $t7 5
# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t7 12($a0)
sw $a0 12($a1)
li $t7 32
sb $t7 16($a1)
li $t7 32
sb $t7 17($a1)
li $t7 32
sb $t7 18($a1)
li $t7 32
sb $t7 19($a1)
li $t7 32
sb $t7 20($a1)
li $t7 0
sb $t7 21($a1)
move $a0 $a1
sw $a0 -212($fp)

lw $t0 -212($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

lw $t0 -196($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 12($v0)
jalr $v0
sw $a0 -192($fp)

# GOTO
b label_17

label_16:

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 8($v0)
jalr $v0
sw $a0 -192($fp)

# GOTO
b label_17

label_17:

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 40($s6)
jal obj_copy
sw $a0 -220($fp)

lw $t0 -220($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 44($s6)
jalr $t0
sw $a0 -224($fp)

lw $t0 -220($fp)
lw $t0 ($t0)

sll $t0 $t0 3
move $t1 $s6
add $t0 $t0 $t1
lw $t0 ($t0)

sw $t0 -228($fp)

# IS TYPE
li $t0 0
lw $t1 -228($fp)
lw $t1 ($t1)
seq $t2 $t1 $t0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t2 12($a0)
sw $a0 -232($fp)

# IF X(BOOL) GOTO DIR(label_18)
lw $t0 -232($fp)
lw $t0 12($t0)
bnez $t0 label_18

lw $t0 12($fp)
lw $t0 ($t0)

sll $t0 $t0 3
move $t1 $s6
add $t0 $t0 $t1
lw $t0 ($t0)

sw $t0 -240($fp)

# IS TYPE
li $t0 0
lw $t1 -240($fp)
lw $t1 ($t1)
seq $t2 $t1 $t0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t2 12($a0)
sw $a0 -244($fp)

# IF X(BOOL) GOTO DIR(label_20)
lw $t0 -244($fp)
lw $t0 12($t0)
bnez $t0 label_20

# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 16($s6)
jal obj_copy
sw $a0 -248($fp)

lw $t0 -248($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 20($s6)
jalr $t0
sw $a0 -252($fp)

# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 -248($fp)
addi $t1 $t1 12

li $t0 1
sw $t0 ($t1)
lw $t0 -248($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 12($v0)
jalr $v0
sw $a0 -236($fp)

# GOTO
b label_21

label_20:

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 8($v0)
jalr $v0
sw $a0 -236($fp)

# GOTO
b label_21

label_21:

lw $t0 -236($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

lw $t0 -220($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 16($v0)
jalr $v0
sw $a0 -216($fp)

# GOTO
b label_19

label_18:

lw $t0 12($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $v0 8($v0)
lw $v0 8($v0)
jalr $v0
sw $a0 -216($fp)

# GOTO
b label_19

label_19:

# SAVES IN $a0 THE RETURN VALUE
lw $a0 -216($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 268
jr $ra

ctor_A:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -8
# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 16($s6)
jal obj_copy
sw $a0 0($fp)

lw $t0 0($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 20($s6)
jalr $t0
sw $a0 -4($fp)

# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 0($fp)
addi $t1 $t1 12

li $t0 10
sw $t0 ($t1)
# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 12($fp)
addi $t1 $t1 12

lw $t2 0($fp)
sw $t2 ($t1)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 20
jr $ra

sum_107:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -12
# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 16($s6)
jal obj_copy
sw $a0 0($fp)

lw $t0 0($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 20($s6)
jalr $t0
sw $a0 -4($fp)

# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 0($fp)
addi $t1 $t1 12

li $t0 1
sw $t0 ($t1)
# PLUS NODE
lw $t1 16($fp)
lw $t1 12($t1)
lw $t2 0($fp)
lw $t2 12($t2)
add $t1 $t1 $t2

# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t1 12($a0)

sw $a0 -8($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 -8($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 28
jr $ra

ctor_B:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -8
# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 16($s6)
jal obj_copy
sw $a0 0($fp)

lw $t0 0($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 20($s6)
jalr $t0
sw $a0 -4($fp)

# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 0($fp)
addi $t1 $t1 12

li $t0 10
sw $t0 ($t1)
# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 12($fp)
addi $t1 $t1 12

lw $t2 0($fp)
sw $t2 ($t1)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 20
jr $ra

sum_108:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -12
# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 16($s6)
jal obj_copy
sw $a0 0($fp)

lw $t0 0($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 20($s6)
jalr $t0
sw $a0 -4($fp)

# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 0($fp)
addi $t1 $t1 12

li $t0 2
sw $t0 ($t1)
# PLUS NODE
lw $t1 16($fp)
lw $t1 12($t1)
lw $t2 0($fp)
lw $t2 12($t2)
add $t1 $t1 $t2

# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t1 12($a0)

sw $a0 -8($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 -8($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 28
jr $ra

mult_109:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -8
# GET-ATTR X = T.Y (SAVES IN X THE ATTR OF OFFSET Y OF T)
lw $t0 12($fp)
addi $t0 $t0 12
lw $t0 ($t0)
sw $t0 0($fp)

# MULT NODE
lw $t1 16($fp)
lw $t1 12($t1)
lw $t2 0($fp)
lw $t2 12($t2)
mul $t1 $t1 $t2

# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t1 12($a0)

sw $a0 -4($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 -4($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 24
jr $ra

ctor_C:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -8
# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 16($s6)
jal obj_copy
sw $a0 0($fp)

lw $t0 0($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 20($s6)
jalr $t0
sw $a0 -4($fp)

# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 0($fp)
addi $t1 $t1 12

li $t0 10
sw $t0 ($t1)
# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 12($fp)
addi $t1 $t1 12

lw $t2 0($fp)
sw $t2 ($t1)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 20
jr $ra

sum_110:
# PUSHING $ra
sw $ra 0($sp)
addiu $sp $sp -4

move $fp $sp

addi $sp $sp -12
# ALLOCATE TYPE (MAKES A COPY OF THE TYPE PROTOTYPE)
lw $a0 16($s6)
jal obj_copy
sw $a0 0($fp)

lw $t0 0($fp)

# PUSHING $t0
sw $t0 0($sp)
addiu $sp $sp -4

# DYNAMIC CALL
lw $v0 4($sp)
# PUSHING $fp
sw $fp 0($sp)
addiu $sp $sp -4
lw $t0 20($s6)
jalr $t0
sw $a0 -4($fp)

# SET-ATTR A.Y = X (STORES X AS THE ATTR OF OFFSET Y OF INSTANCE A)
lw $t1 0($fp)
addi $t1 $t1 12

li $t0 3
sw $t0 ($t1)
# PLUS NODE
lw $t1 16($fp)
lw $t1 12($t1)
lw $t2 0($fp)
lw $t2 12($t2)
add $t1 $t1 $t2

# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t1 12($a0)

sw $a0 -8($fp)

# SAVES IN $a0 THE RETURN VALUE
lw $a0 -8($fp)

lw $ra 4($fp)
lw $fp 8($fp)
addi $sp $sp 28
jr $ra

# CREATING SOME UTIL FUNCTIONS
# DECLARATION OF THE MEM-ALLOC BODY
mem_alloc:
add $gp $gp $a0
blt $gp $s7 mem_alloc_end
j mem_error
mem_alloc_end:
sub $a0 $gp $a0
jr $ra

# GET PARENT PROTOTYPE
get_parent_prot:
lw $t0 ($a0)
sll $t0 $t0 2
lw $t0 ($s4)
move $a0 $t0
jr $ra

# DECLARATION OF THE OBEJCT.COPY AUX BODY
obj_copy:
lw $s1 4($a0)

add $gp $gp $s1
sub $s0 $gp $s1

move $s2 $s0

cpy_loop: #loop pa copiar el obj
lw $s3 0($a0)
sw $s3 0($s2)

addiu $a0 $a0 4
addiu $s2 $s2 4
addi $s1 $s1 -4

bnez $s1 cpy_loop

move $a0 $s0
jr $ra

# DECLARATION OF THE STRING.EQUALS AUX BODY
str_eq:

lw $t6 12($v0)
lw $t6 12($t6)
lw $t7 12($v1)
lw $t7 12($t7)

bne $t7 $t6 str_eq_false
beqz $t7 str_eq_true

addi $v0 $v0 16
addi $v1 $v1 16
move $t5 $t7

str_eq_loop:
lb $t7 ($v0)
lb $t6 ($v1)
bne $t7 $t6 str_eq_false
addi $v0 $v0 1
addi $v1 $v1 1
addi $t5 $t5 -1
bnez $t5 str_eq_loop

str_eq_true:
li $t6 1
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t6 12($a0)
jr $ra

str_eq_false:
li $t6 0
# CREATE A NEW BOOL PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 24($s6)
jal obj_copy
sw $t6 12($a0)
jr $ra

# DECLARATION OF THE STRING.CONCAT AUX BODY
str_concat:
move $t2 $ra

lw $t6 12($v0)
lw $t6 12($t6)
lw $t7 12($v1)
lw $t7 12($t7)

add $a0 $t6 $t7
addi $a0 $a0 17
li $t5 4
rem $t4 $a0 $t5
sub $t5 $t5 $t4
add $a0 $a0 $t5
move $t4 $a0
jal mem_alloc
move $a1 $a0
move $a3 $a0
lw $t5 ($v0)
sw $t5 ($a1)
sw $t4 4($a1)
lw $t5 8($v0)
sw $t5 8($a1)
add $t5 $t6 $t7
# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t5 12($a0)
sw $a0 12($a1)
move $a0 $a1
addi $a1 $a1 16
addi $v0 $v0 16
addi $v1 $v1 16
strcat_loop:
lb $t5 ($v0)
sb $t5 ($a1)
addi $a1 $a1 1
addi $v0 $v0 1
addi $t6 $t6 -1
bnez $t6 strcat_loop

strcat_loop2:
lb $t5 ($v1)
sb $t5 ($a1)
addi $v1 $v1 1
addi $a1 $a1 1
addi $t7 $t7 -1
bnez $t7 strcat_loop2

li $t5 0
sb $t5 ($a1)
move $ra $t2
jr $ra

# DECLARATION OF THE STRING.SUBSTR AUX BODY
str_substr:
move $t7 $ra
lw $t0 12($t0)
lw $t1 12($t1)

add $t3 $t0 $t1
lw $t4 12($v0)
lw $t4 12($t4)
bge $t3 $t4 substr_error

addi $a0 $t1 17
li $t5 4
rem $t4 $a0 $t5
sub $t5 $t5 $t4
add $a0 $a0 $t5
move $t4 $a0
jal mem_alloc
move $a1 $a0
lw $t5 ($v0)
sw $t5 ($a1)
sw $t4 4($a1)
lw $t5 8($v0)
sw $t5 8($a1)
# CREATE A NEW INT PROTOYPE IN HEAP AND STORE ITS VALUE
lw $a0 16($s6)
jal obj_copy
sw $t1 12($a0)
sw $a0 12($a1)
move $a0 $a1
addi $t0 $t0 16
add $v0 $v0 $t0
addi $a1 $a1 16
substr_loop:
lb $t5 ($v0)
sb $t5 ($a1)
addi $v0 $v0 1
addi $a1 $a1 1
addi $t1 $t1 -1
bnez $t1 substr_loop

li $t5 0
sb $t5 ($a1)
move $ra $t7
jr $ra
# DECLARATION OF THE LEN AUX BODY
len:
li $t0 0
len_loop:
lb $t7 ($a0)
addi $t0 $t0 1
addi $a0 $a0 1
bne $t7 $0 len_loop
jr $ra

# DECLARATION OF THE ZERO-DIV RE BODY
zero_error:
la $a0 _zero

li $v0 4
syscall
li $v0 10
syscall

# DECLARATION OF THE MEMORY-OVERFLOW RE BODY
mem_error:
la $a0 _mem

li $v0 4
syscall
li $v0 10
syscall

# DECLARATION OF THE SUBSTR-IND.OUT.OF.RANGE RE BODY
substr_error:
la $a0 _substr

li $v0 4
syscall
li $v0 10
syscall

_end_main:
